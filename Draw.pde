





public void draw(){
  background(100);
  if(NoDraw == false) {
    customGUI();
    DrawFFTSpectrum();
  }
    
  
  
  GetFFTData();
}

// Custom GUI Controls
public void customGUI(){
  
  if(settings_open == true) {
    btnSettings.setEnabled(false);
  }
  if(settings_open == false) {
    btnSettings.setEnabled(true);
  }
  
  
  
  lblDebug.setText(DebugText);
    background(100,100,100);
  fill(50,50,50);
  rect(15,10,500,170); // Graph Background
  rect(5,275,505,20); // Debug Background
  fill(200);
  rect(15,10,5,160);
  fill(0,150,0);
  rect(20+(sliTreble.getValueI()*10),170,TrebArraySize[pointer]*10,10);
  fill(0,0,150);
  rect(20+(sliTreble.getValueI()*10),170,sliBass.getValueI()*10,10);
  //fill(0,0,150);
  //rect(20,170,realcutstart,10);
  //fill(150,0,0);
  //rect(20+realcutaddx,170,490-realcutaddx,10);
  for(int i=0;i<=15;i++)
  {
    stroke(100);
    
    if(i==5)
    {
      stroke(200);
      fill(200);
      text("100",535,25+i*10);
    }
    if(i==10)
    {
      stroke(200);
      fill(200);
      text("50",535,25+i*10);
    }
    if(i==0)
    {
      stroke(200);
      fill(200);
      text("150",535,25+i*10);
      
    }
    if(i==15)
    {
      stroke(200);
      fill(200);
      text("0",535,25+i*10);
      
    }
    
    line(20,20+i*10,510,20+i*10);
    
    
    
  }
  for(int i=1; i<=fftLines;i++)
  {
   stroke(100);
    line(10+i*10,20,10+i*10,180);
    
    
    
    
  }
  stroke(0);
  
  
  

}






// AutoGenerated
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.GOLD_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("InReact Alpha 0.6");
  btnExecute = new GButton(this, 715, 265, 80, 30);
  btnExecute.setText("Connect");
  btnExecute.addEventHandler(this, "HandleButtonEvents");
  btnSettings = new GButton(this, 630, 265, 80, 30);
  btnSettings.setText("Settings");
  btnSettings.addEventHandler(this, "HandleButtonEvents");
  sliMul = new GSlider2D(this, 633, 160, 100, 100);
  sliMul.setLimitsX(0, 0, 2);
  sliMul.setLimitsY(0, 2, 0);
  sliMul.setNumberFormat(G4P.DECIMAL, 1);
  //sliMul.setPrecision(2);
  sliMul.setOpaque(true);
  sliMul.addEventHandler(this, "Handle2DSliderEvents");
  lstSelectLight = new GDropList(this, 690, 20, 90, 80, 3);
  lstSelectLight.setItems(LightNameVisualBuffer, 0);
  lstSelectLight.addEventHandler(this, "HandleDropListEvents");
  lstCom = new GDropList(this, 590, 20, 90, 80, 3);
  lstCom.setItems(ports, 0);
  lstCom.addEventHandler(this, "HandleDropListEvents");
  sliBass = new GSlider(this, 10, 190, 500, 40, 10.0);
  sliBass.setLimits(0, 0, 50);
  sliBass.setNumberFormat(G4P.INTEGER, 0);
  sliBass.setOpaque(false);
  sliBass.addEventHandler(this, "HandleSliderEvents");
  sliTreble = new GSlider(this, 10, 220, 500, 40, 10.0);
  sliTreble.setLimits(0, 0, 50);
  sliTreble.setNumberFormat(G4P.INTEGER, 0);
  sliTreble.setOpaque(false);
  sliTreble.addEventHandler(this, "HandleSliderEvents");
  sliLowPass = new GSlider(this, 575, 20, 150, 100, 10.0);
  sliLowPass.setRotation(PI/2, GControlMode.CORNER);
  sliLowPass.setLimits(0, 150, 0);
  sliLowPass.setNumberFormat(G4P.INTEGER, 0);
  sliLowPass.setOpaque(false);
  sliLowPass.addEventHandler(this, "HandleSliderEvents");
  sliMulSat = new GSlider(this, 630, 160, 100, 20, 10.0);
  sliMulSat.setRotation(PI/2, GControlMode.CORNER);
  sliMulSat.setLimits(0.0, 255, 0);
  sliMulSat.setNumberFormat(G4P.DECIMAL, 2);
  sliMulSat.setOpaque(false);
  sliMulSat.addEventHandler(this, "HandleSliderEvents");
  chkMode = new GCheckbox(this, 631, 134, 120, 20);
  chkMode.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  chkMode.setText("MODE");
  chkMode.setOpaque(false);
  chkMode.addEventHandler(this, "chkMode_clicked");
  lblDebug = new GLabel(this, 10, 275, 500, 20);
  lblDebug.setText("Debug");
  lblDebug.setOpaque(false);
  lblsliMul = new GLabel(this, 740, 240, 50, 20);
  lblsliMul.setText("0,0");
  lblsliMul.setOpaque(false);
  lblsliBass = new GLabel(this, 515, 200, 50, 20);
  lblsliBass.setText("0");
  lblsliBass.setTextBold();
  lblsliBass.setOpaque(false);
  lblsliTreble = new GLabel(this, 570, 230, 50, 20);
  lblsliTreble.setText("0");
  lblsliTreble.setTextBold();
  lblsliTreble.setOpaque(false);
  txbTrebArraySize = new GTextField(this, 515, 230, 50, 20, G4P.SCROLLBARS_NONE);
  txbTrebArraySize.setOpaque(false);
  txbTrebArraySize.addEventHandler(this, "HandleTextboxEvents");
  btnSaveSelection = new GButton(this, 740, 225, 55, 30);
  btnSaveSelection.setText("Save");
  btnSaveSelection.setTextBold();
  btnSaveSelection.addEventHandler(this, "HandleButtonEvents");
  txbPatternNum = new GTextField(this, 743, 192, 33, 25, G4P.SCROLLBARS_NONE);
  txbPatternNum.setOpaque(true);
  txbPatternNum.addEventHandler(this, "HandleTextboxEvents");
}

public void CreateSettingsWindow() {
  winLightSettings = GWindow.getWindow(this, "Light Settings", 0, 0, 300, 150, JAVA2D);
  winLightSettings.noLoop();
  winLightSettings.setActionOnClose(G4P.CLOSE_WINDOW);
  winLightSettings.addDrawHandler(this, "winLightSettings_draw");
  winLightSettings.addOnCloseHandler(this,"winLightSettings_OnClose");
  lstLoadLightSettings = new GDropList(winLightSettings, 10, 10, 90, 80, 3);
  lstLoadLightSettings.setItems(LightNameVisualBuffer, 0);
  lstLoadLightSettings.addEventHandler(this, "HandleDropListEvents");
  btnNewLight = new GButton(winLightSettings, 10, 100, 40, 20);
  btnNewLight.setText("New");
  btnNewLight.addEventHandler(this, "HandleButtonEvents");
  txbLEDsAmount = new GTextField(winLightSettings, 190, 40, 70, 20, G4P.SCROLLBARS_NONE);
  txbLEDsAmount.setOpaque(true);
  txbLEDsAmount.addEventHandler(this, "HandleTextboxEvents");
  lblLightsAmount = new GLabel(winLightSettings, 140, 40, 40, 20);
  lblLightsAmount.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblLightsAmount.setText("LEDs:");
  lblLightsAmount.setOpaque(false);
  lblLightName = new GLabel(winLightSettings, 120, 10, 60, 20);
  lblLightName.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblLightName.setText("Light Name");
  lblLightName.setOpaque(false);
  txbLightName = new GTextField(winLightSettings, 190, 10, 70, 20, G4P.SCROLLBARS_NONE);
  txbLightName.setOpaque(true);
  txbLightName.addEventHandler(this, "HandleTextboxEvents");
  lblPin = new GLabel(winLightSettings, 140, 70, 40, 20);
  lblPin.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  lblPin.setText("PIN:");
  lblPin.setOpaque(false);
  txbPin = new GTextField(winLightSettings, 190, 70, 70, 20, G4P.SCROLLBARS_NONE);
  txbPin.setOpaque(true);
  txbPin.addEventHandler(this, "HandleTextboxEvents");
  btnSave = new GButton(winLightSettings, 60, 100, 40, 20);
  btnSave.setText("Save");
  btnSave.addEventHandler(this, "HandleButtonEvents");
  winLightSettings.loop();
}

public void DrawFFTSpectrum()
{
  if(ready) {
  fft.forward(in.mix);
  for(int i = 1; i < fftLines; i++)
  {
    
    float band = fft.getBand(i)*MulBright[pointer];
    float colband = band;
    if(colband>255)
    {
      colband = 255;
    }
    
    fill(colband,255-colband,0);
    float constY = band;
    if(constY > 150) {
      constY = 150;
    }
    
    rect(10 + i*10,170,10,-constY-5);
    
  }
  }
  delay(appfps/1000);
  
  
  
}

synchronized public void winLightSettings_draw(PApplet appc, GWinData data) { 
  appc.background(100);
} 


GButton btnExecute; 
GButton btnSettings; 
GSlider2D sliMul; 
GDropList lstSelectLight; 
GDropList lstCom; 
GSlider sliBass; 
GSlider sliTreble;
GSlider sliLowPass;
GCheckbox chkMode; 
GLabel lblDebug; 
GWindow winLightSettings;
GDropList lstLoadLightSettings; 
GButton btnNewLight; 
GTextField txbLEDsAmount; 
GLabel lblLightsAmount; 
GLabel lblLightName; 
GTextField txbLightName; 
GLabel lblPin; 
GTextField txbPin; 
GButton btnSave;
GLabel lblsliBass; 
GLabel lblsliTreble;
GLabel lblsliMul;
GTextField txbTrebArraySize; 
GSlider sliMulSat; 
GButton btnSaveSelection; 
GTextField txbPatternNum; 